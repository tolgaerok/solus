source /usr/share/defaults/etc/profile
export PATH="$PATH:$HOME/local/bin"
xhost +si:localuser:$USER
###---------- ALIASES ----------###

alias tolga-alert='notify-send --urgency=low "$(history|tail -n1|sed -e "s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//")"'
alias tolga-tolga='sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/tolgaerok/tolga-scripts/main/Fedora39/TolgaFedora39.sh)"'

alias tolga-systcl="sudo /home/tolga/scripts/systcl.sh"

alias gitup="$HOME/gitup.sh"

###---------- my tools ----------###
alias tolga-htos="sudo ~/.config/MY-TOOLS/assets/scripts/Zysnc-Options/ZYSNC-HOME-TO-SERVER.sh"
alias tolga-mount="sudo ~/.config/MY-TOOLS/assets/scripts/Mounting-Options/MOUNT-ALL.sh"
alias tolga-mse="sudo ~/scripts/MYTOOLS/mse.sh"
alias tolga-stoh="sudo ~/.config/MY-TOOLS/assets/scripts/Zysnc-Options/ZYSNC-SERVER-TO-HOME.sh"
alias tolga-umount="sudo ~/.config/MY-TOOLS/assets/scripts/Mounting-Options/UMOUNT-ALL.sh"

###---------- fun stuff ----------###
alias tolga-pics="sxiv -t $HOME/Pictures/CUSTOM-WALLPAPERS/"
alias tolga-wp="sxiv -t $HOME/Pictures/Wallpaper/"

###---------- navigate files and directories ----------###
alias ..="cd .."
alias cl="clear"
alias copy="rsync -P"
alias la="lsd -a"
alias ll="lsd -l"
alias Ls="lsd"
alias ls="ls --color=auto"
alias dir="dir --color=auto"
alias lsla="lsd -la"

# alias chmod commands
alias tolga-000='sudo chmod -R 000'
alias tolga-644='sudo chmod -R 644'
alias tolga-666='sudo chmod -R 666'
alias tolga-755='sudo chmod -R 755'
alias tolga-777='sudo chmod -R 777'
alias tolga-mx='sudo chmod a+x'

# Search command line history
alias tolga-h="history | grep "

# Search running processes
alias tolga-p="ps aux | grep "
alias tolga-topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Search files in the current folder
alias tolga-f="find . | grep "

# Alias's for safe and forced reboots
alias tolga-rebootforce='sudo shutdown -r -n now'
alias tolga-rebootsafe='sudo shutdown -r now'

###---------- Tools ----------###
alias rc='source ~/.bashrc && clear && echo "" && fortune | lolcat  && echo ""'
alias tolga-bashrc='kwrite  ~/.bashrc'
alias tolga-cong="sysctl net.ipv4.tcp_congestion_control"
alias tolga-fmem="echo && echo 'Current mem:' && free -h && sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches' && echo && echo 'After: ' && free -h"
alias tolga-fmem2="echo && echo 'Current mem:' && free -h && sudo /bin/sh -c '/bin/sync && /sbin/sysctl -w vm.drop_caches=3' && echo && echo 'After: ' && free -h"
alias tolga-fstab="sudo mount -a && sudo systemctl daemon-reload && echo && echo \"Reloading of fstab done\" && echo"
alias tolga-grub="sudo grub2-mkconfig -o /boot/grub2/grub.cfg && sudo grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg"
alias tolga-io="cat /sys/block/sda/queue/scheduler"
alias tolga-line="echo '## ------------------------------ ##'"
alias tolga-nvidia='sudo systemctl enable --now akmods --force && sudo dracut --force && echo && echo "Force akmods and Dracut on NVIDIA done" && echo'

alias tolga-pdfcompress='bash /home/tolga/scripts/pdf1.sh'
alias tolga-samba='gum spin --spinner dot --title "Restarting Samba" -- sleep 2 && sudo systemctl enable smb.service nmb.service && sudo systemctl restart smb.service nmb.service'
alias tolga-swapreload="cl && echo && echo 'Turning swap off:' && echo 'Turning swap on:' && tolga-line && sudo swapon --all && sudo swapon --show && echo && echo 'Reload Swap(s):' && tolga-line && sudo mount -a && sudo systemctl daemon-reload && sudo swapon --show && echo && echo 'Free memory:' && tolga-line && free -h && echo && duf && tolga-sys && tolga-fmem"
alias tolga-sys="echo && tolga-io && echo && tolga-cong && echo && echo 'ZSWAP status: ( Y = ON )' && cat /sys/module/zswap/parameters/enabled && systemctl restart earlyoom && systemctl status earlyoom --no-pager"
alias tolga-trim="sudo fstrim -av"

# Assign a color variable based on the RANDOM number
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
CYAN='\e[1;36m'
WHITE='\e[1;37m'
ORANGE='\e[1;93m'
NC='\e[0m'
YELLOW='\e[1;33m'
NC='\e[0m'

display_message() {
    clear
    echo -e "\n                  Tolga's cleanup && updater\n"
    echo -e "\e[34m|--------------------\e[33m Currently configuring:\e[34m-------------------|"
    echo -e "|${YELLOW}==>${NC}  $1"
    echo -e "\e[34m|--------------------------------------------------------------|\e[0m"
    echo ""
    gum spin --spinner dot --title "Stand-by..." -- sleep 1
}

# Debugging step: echo what will be passed to display_message
echo "Calling display_message with: [${GREEN}✔${NC}]  Cleanup complete, ENJOY!"
display_message "[${GREEN}✔${NC}]  Cleanup complete, ENJOY!"

countdown() {
    local seconds=$1
    local message=$2

    echo -ne "${message} (Press Enter to skip): "

    # Start a background process to handle user input
    read -r -t $seconds -p "" && touch /tmp/skip_fstrim &

    local pid=$!

    while [ $seconds -gt 0 ]; do
        if [ -e /tmp/skip_fstrim ]; then
            echo -e "\nSkipping fstrim due to user input"
            return
        fi
        echo -ne "$seconds\033[0K\r"
        sleep 1
        ((seconds--))
    done
    echo -ne "\n"

    # Wait for the background read process to complete
    wait $pid
}

cleanup_solus() {
    # Clean package cache
    display_message "[${GREEN}✔${NC}]  Time to clean up system..."
    sudo eopkg clean

    # Remove unnecessary dependencies
    sudo eopkg rmf

    display_message "[${GREEN}✔${NC}] Trimming all mount points on SSD"

    countdown 3 "Starting fstrim"

    # Check if input was received
    if [ ! -e /tmp/skip_fstrim ]; then
        echo "No input detected. Skipping fstrim."
    else
        # Run fstrim if no input was received
        sudo fstrim -av
    fi

    echo -e "\e[1;32m[✔]\e[0m Restarting kernel tweaks...\n"
    gum spin --spinner dot --title "Stand-by..." -- sleep 2

    display_message "[${GREEN}✔${NC}]  Cleanup complete, ENJOY!"
    #gum spin --spinner dot --title "Stand-by..." -- sleep 2
    echo -e "\e[1;32m[✔]\e[0m Checking system updates .....\n" &&
        sudo eopkg upgrade -y

}

alias tolga-update='
echo -e "\e[1;32m[✔]\e[0m Network is metered. Rotating and vacuuming journal logs...\n" && \
(sudo journalctl --rotate; sudo journalctl --vacuum-time=1s && sleep 1) && \
sleep 1 && \
cleanup_solus && \

display_message "[\e[1;32m✔\e[0m]  Checking flatpaks" && \
echo -e "\e[1;32m[✔]\e[0m Checking updates for installed flatpak programs...\n" && \
sudo flatpak update --appstream && flatpak update && \
sudo flatpak update -y && \
sleep 1 && \
echo -e "\e[1;32m[✔]\e[0m Removing Old Flatpak Cruft...\n" && \
flatpak uninstall --unused && \
flatpak uninstall --delete-data && \
sudo rm -rfv /var/tmp/flatpak-cache-* && \
[ -f /usr/bin/flatpak ] && flatpak uninstall --unused --delete-data --assumeyes && \
flatpak --user uninstall --unused -y --noninteractive && \
/usr/bin/flatpak --user update -y --noninteractive && \
/usr/bin/flatpak --user repair && \
recache_fonts && \
echo -e "\e[1;32m[✔]\e[0m All updates and cleanups are complete."'

# recache all Flatpak and system fonts
recache_fonts() {
    echo -e "\e[1;32m[✔]\e[0m Recaching Flatpak fonts..."
    flatpak repair --system || {
        echo -e "\e[1;31m[✘]\e[0m Failed to recache Flatpak fonts."
        exit 1
    }

    echo -e "\e[1;32m[✔]\e[0m Recaching system fonts..."
    sudo mkdir -p /usr/local/share/fonts
    sudo chmod -R 755 /usr/local/share/fonts
    sudo rm -rf /var/cache/fontconfig/*
    sudo fc-cache -rv || {
        echo -e "\e[1;31m[✘]\e[0m Failed to recache system fonts."
        exit 1
    }

    echo -e "\e[1;32m[✔]\e[0m Font cache update complete."
}

alias tolga-sysctl-reload="sudo udevadm control --reload-rules && sudo udevadm trigger && sudo sysctl --system && sudo sysctl -p && sudo mount -a && sudo systemctl daemon-reload"

###---------- file access ----------###
alias tolga-bconf="vim ~/.config/bash/.bashrc"
alias tolga-cp="cp -riv"
alias tolga-htos='sudo ~/.config/MY-TOOLS/assets/scripts/Zysnc-Options/ZYSNC-HOME-TO-SERVER.sh'
alias tolga-mkdir="mkdir -vp"
alias tolga-mount='sudo ~/.config/MY-TOOLS/assets/scripts/Mounting-Options/MOUNT-ALL.sh'
alias tolga-mse='sudo ~/scripts/MYTOOLS/MAKE-SCRIPTS-EXECUTABLE.sh'
alias tolga-mv="mv -iv"
alias tolga-mynix='sudo ~/.config/MY-TOOLS/assets/scripts/COMMAN-NIX-COMMAND-SCRIPT/MyNixOS-commands.sh'
alias tolga-stoh='sudo ~/.config/MY-TOOLS/assets/scripts/Zysnc-Options/ZYSNC-SERVER-TO-HOME.sh'
alias tolga-trimgen='sudo ~/.config/MY-TOOLS/assets/scripts/GENERATION-TRIMMER/TrimmGenerations.sh'
alias tolga-umount='sudo ~/.config/MY-TOOLS/assets/scripts/Mounting-Options/UMOUNT-ALL.sh'
alias tolga-zconf="vim ~/.config/zsh/.zshrc"

alias cj="sudo journalctl --rotate; sudo journalctl --vacuum-time=1s"

alias tolga-batt='clear && echo "Battery: $(acpi -b | awk '\''{print $3}'\'')" && echo '' && echo "Battery Percentage: $(acpi -b | awk '\''{print $4}'\'')" && echo '' && echo "Remaining Time: $(acpi -b | awk '\''{print $5,$6,$7 == "until" ? "until fully charged" : $7}'\'')"'

###---------- session ----------###
alias tolga-sess='session=$XDG_SESSION_TYPE && echo "" && gum spin --spinner dot --title "Current XDG session is: [ $session ] """ -- sleep 2'

###---------- Nvidia session ----------###
export LIBVA_DRIVER_NAME=nvidia
export WLR_NO_HARDWARE_CURSORS=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export __GL_SHADER_CACHE=1
export __GL_THREADED_OPTIMIZATION=1

btrfs_balance_and_monitor() {
    echo "Starting Btrfs balance for /home..."
    sudo btrfs balance start -m -d /home
    echo "Balance started. Monitoring status every 10 seconds..."
    while true; do
        echo "Checking balance status..."
        sudo btrfs balance status /home
        sleep 10
    done
}

# Alias to run the function
alias btrfs-home="btrfs_balance_and_monitor"

###---------- BTRFS TOOLS ----------######
alias tolga-balance-home="sudo btrfs balance start /home && sudo btrfs balance status /home"
alias tolga-balance-root="sudo btrfs balance start / && sudo btrfs balance status /"
alias tolga-scrub-home="sudo btrfs scrub start /home && sudo btrfs scrub status /home"
alias tolga-scrub-root="sudo btrfs scrub start / && sudo btrfs scrub status /"

btrfs_manage() {
    clear
    echo ""
    echo "###---------- BTRFS TOOLS ----------######"
    echo "Choose an operation:"
    echo "1) Balance /home"
    echo "2) Balance /"
    echo "3) Scrub /home"
    echo "4) Scrub /"
    echo "5) Exit"
    read -p "Enter your choice [1-5]: " choice

    case $choice in
    1)
        echo "Starting balance on /home..."
        sudo btrfs balance start /home && sudo btrfs balance status /home
        ;;
    2)
        echo "Starting balance on /..."
        sudo btrfs balance start / && sudo btrfs balance status /
        ;;
    3)
        echo "Starting scrub on /home..."
        sudo btrfs scrub start /home && sudo btrfs scrub status /home
        ;;
    4)
        echo "Starting scrub on /..."
        sudo btrfs scrub start / && sudo btrfs scrub status /
        ;;
    5)
        echo "Exiting."
        return 0
        ;;
    *)
        echo "Invalid option. Please choose a number between 1 and 5."
        ;;
    esac
}

alias btrfs-manage="btrfs_manage"

###---------- Konsole effects ----------###
PS1="\[\e[1;m\]┌(\[\e[1;32m\]\u\[\e[1;34m\]@\h\[\e[1;m\]) \[\e[1;m\]➤\[\e[1;36m\] \W \[\e[1;m\] \n\[\e[1;m\]└\[\e[1;33m\]➤\[\e[0;m\]  "

###---------- Nix package manager ----------###
# export PATH="/home/tolga/.nix-profile/bin:$PATH"
# . /home/tolga/.nix-profile/etc/profile.d/nix.sh

###---------- Vscoding ----------###
# eval "$(direnv hook bash)"

###---------- Solus related ----------###
alias tolga-solus='sudo mount -a && sudo systemctl daemon-reload && sudo udevadm control --reload-rules && sudo udevadm trigger && sudo sysctl --system'

# nix-env -iA nixpkgs.fortune
# export NIXPKGS_ALLOW_UNFREE=1 && nix-env -iA nixpkgs.megasync

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

XDG_DESKTOP_DIR="$HOME/"
XDG_DOWNLOAD_DIR="$HOME/"
XDG_DOCUMENTS_DIR="$HOME/"
XDG_MUSIC_DIR="$HOME/"
XDG_PICTURES_DIR="$HOME/"
XDG_VIDEOS_DIR="$HOME/"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"

# Check whether if the windowing system is Xorg or Wayland windowing system and set environment variables accordingly
# Tolga Erok

if [[ ${XDG_SESSION_TYPE} == "wayland" ]]; then
    export MOZ_ENABLE_WAYLAND=1
    export OBS_USE_EGL=1
    echo "Running on Wayland: Enabled Wayland-specific settings."
    echo "" && sleep .1

elif [[ ${XDG_SESSION_TYPE} == "x11" ]]; then
    export MOZ_ENABLE_WAYLAND=0
    export OBS_USE_EGL=0
    echo "Running on Xorg: Disabled Wayland-specific settings."
    echo "" && sleep .1
else
    echo "Unknown windowing system: ${XDG_SESSION_TYPE}. No changes made."
    echo "" && sleep .1
fi

# Check if qt5ct is installed and set QT/Kvantum theme settings
if command -v qt5ct &>/dev/null; then
    export QT_QPA_PLATFORM="xcb"
    export QT_QPA_PLATFORMTHEME="qt5ct"
    echo "qt5ct is installed: QT settings applied."
    echo "" && sleep .1
else
    echo "qt5ct is not installed: QT settings not applied."
    echo "You can install qt5ct with: sudo dnf install qt5ct"
    echo "" && sleep .1
fi

cl && echo "" && fortune | lolcat && echo ""

alias fastfetch='BLUEFIN_FETCH_LOGO=$(find $HOME/.config/fastfetch/logo/* | /usr/bin/shuf -n 1) && rm -rf $HOME/.cache/fastfetch && /usr/bin/fastfetch --logo $BLUEFIN_FETCH_LOGO -c $HOME/.config/fastfetch/config.jsonc'
alias cake="sudo tc -s qdisc show dev wlp3s0 && sudo systemctl status apply-cake-qdisc.service"
alias boot="sudo clr-boot-manager mount-boot && cd /boot/loader && sudo nano loader.conf"
alias cake2='interface=$(ip link show | awk -F: '\''$0 ~ "wlp|wlo|wlx" && $0 !~ "NO-CARRIER" {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; getline}'\''); sudo tc -s qdisc show dev $interface && sudo systemctl status apply-cake-qdisc.service'
alias grub-mod="sudo nano /etc/kernel/cmdline.d/mitigations.conf"

. "$HOME/.atuin/bin/env"
[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
eval "$(atuin init bash)"
